---
- name: "Provision Docker"
  hosts: all
  become: true

  vars_files:
    - ../vars/docker.yml

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  tasks:

  - name: Enable docker at boot
    ansible.builtin.systemd:
      name: docker
      enabled: yes

  - name: Enable containerd at boot
    ansible.builtin.systemd:
      name: containerd
      enabled: yes

  - name: Add user syncertls
    ansible.builtin.user:
      name: "syncertls"
      shell: /bin/sh
      home: /etc/letsencrypt
      groups: root

  - name: Fetch manager key on bootstrap
    slurp:
      src: /home/manager/.ssh/id_rsa.pub
    register: slurped_boostrap_key_b64
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == bootstrap_node_ip

  - name: Fetch manager key on secondary
    slurp:
      src: /root/.ssh/id_rsa.pub
    register: slurped_secondary_key_b64
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == secondary_node_ip

  - name: Ensure the fetched key is set for syncertls 1
    authorized_key:
      user: syncertls
      state: present
      key: "{{ slurped_secondary_key_b64.content | b64decode }}"
      key_options: 'command="rsync --server -vulogDtpre.iLsfxC . /etc/letsencrypt"'
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == bootstrap_node_ip

  - name: Ensure the fetched key is set for syncertls 2
    authorized_key:
      user: syncertls
      state: present
      key: "{{ slurped_bootstrap_key_b64.content | b64decode }}"
      key_options: 'command="rsync --server -vulogDtpre.iLsfxC . /etc/letsencrypt"'
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == secondary_node_ip

  - name: Lock with Firewall TCP
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: "{{ item }}"
      source: "{{ cross_mapping['%s' | format(hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | replace('.', '_'))] }}"
      jump: ACCEPT
    become: yes
    with_items:
      - 2377
      - 7946

  - name: Lock with Firewall UDP
    iptables:
      chain: INPUT
      protocol: udp
      destination_port: "{{ item }}"
      source: "{{ cross_mapping['%s' | format(hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | replace('.', '_'))] }}"
      jump: ACCEPT
    become: yes
    with_items:
      - 4789
      - 7946

  - name: Allow TCP port 80
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: 80
      jump: ACCEPT
    with_items: "{{ }}"

  - name: Allow TCP port 443
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: 443
      jump: ACCEPT
    with_items: "{{ }}"

  - name: Init Docker Swarm
    shell: docker swarm init
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == manager_node_ip

  - name: Join as Worker
    shell: docker swarm join --token {{ join_token.stdout }} {{ manager_node_ip }}:2377

  - name: Get Join Token Worker
    shell: docker swarm join-token --quiet worker
    register: join_token

  - name: Deploy Stacks
    shell: docker stack deploy -c {{ item.path }} app_{{ item.name | regex_replace('_.+/', '') }}
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == manager_node_ip
    with_items: "{{ stacks }}"

  - name: Tailor services
    shell: |
      docker service update --replicas-max-per-node=1 {{ item.name }}
      docker service scale {{ item.name }}={{ ansible_play_hosts | length }}
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == manager_node_ip
    with_items: "{{ stacks }}"

  - name: Add sync tls script to crontab 1
    blockinfile:
      path: /var/spool/cron/crontabs/root
      block: |
        0 * * * * /usr/bin/timeout 120 /root/sync-certs.sh {{ secondary_node_ip }}
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == manager_node_ip

  - name: Add sync tls script to crontab 2
    blockinfile:
      path: /var/spool/cron/crontabs/root
      block: |
        0 * * * * /usr/bin/timeout 120 /root/sync-certs.sh {{ bootstrap_node_ip }}
    when: hostvars[inventory_hostname]['ansible_default_ipv4']['address'] == secondary_node_ip

  - name: Add labels
    shell: |
      docker node update --label-add provider=hetzner web-1
      docker node update --label-add datacenter=hel1-dc2 web-1
      docker node update --label-add location=hel web-1
      docker node update --label-add disk=hdd web-2
      docker node update --label-add db=true web-1
      docker node update --label-add cpu=1 web-1
      docker node update --label-add ram=1 web-1
      docker node update --label-add diskspace=25 web-1
      
      docker node update --label-add provider=hetzner web-2
      docker node update --label-add datacenter=nbg1-dc3 web-2
      docker node update --label-add location=nbg web-2
      docker node update --label-add disk=hdd web-1
      docker node update --label-add db=true web-2
      docker node update --label-add cpu=1 web-2
      docker node update --label-add ram=1 web-2
      docker node update --label-add diskspace=25 web-2
      
      docker node update --label-add provider=scaleway web-3
      docker node update --label-add datacenter=ams1 web-3
      docker node update --label-add location=ams web-3
      docker node update --label-add disk=hdd web-3
      docker node update --label-add db=false web-3
      docker node update --label-add cpu=1 web-3
      docker node update --label-add ram=1 web-3
      docker node update --label-add diskspace=10 web-3
